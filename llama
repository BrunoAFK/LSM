#!/bin/bash

# Information header
# Author: Bruno Pavelja - Bruno_AFK - Paveljame IT
# Web: pavelja.me
# Github: github.com/brunoafk
# Version: 1.0.0
# Description: This script manages the installation, updating, and removal of the "llama" scripts from GitHub or local files.
# How it works: The script fetches components from GitHub or local files, installs them, and creates necessary symbolic links.
# Important variables:
#   - VERSION: The current version of the script.
#   - DEV_DIR: Directory for storing the main script and components.
#   - SCRIPTS_DIR: Directory for storing executable scripts.

VERSION="1.0.0"
GITHUB_USER="yourusername"
GITHUB_REPO="llama"
GITHUB_BRANCH="main"
DEV_DIR="/opt/llama"
SCRIPTS_DIR="/usr/local/lib/llama/scripts"
GITHUB_RAW_BASE="https://raw.githubusercontent.com/$GITHUB_USER/$GITHUB_REPO/$GITHUB_BRANCH"
GITHUB_API_BASE="https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO"
TEMP_DIR=""

# Setup a temporary directory and ensure cleanup on exit
setup_temp_dir() {
    TEMP_DIR=$(mktemp -d)
    trap 'rm -rf "$TEMP_DIR"' EXIT
}

# Return the path for binary installation based on the OS
get_bin_path() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "/usr/local/bin"
    else
        echo "/usr/local/bin"
    fi
}

# Display help information
show_help() {
    echo -e "\e[1;34mLlama Script Manager v$VERSION\e[0m"
    echo
    echo -e "\e[1;32mUsage:\e[0m"
    echo "  llama [COMMAND] [ARGUMENTS]"
    echo "  llama [OPTIONS]"
    echo
    echo -e "\e[1;33mCommands:\e[0m"
    printf "%-15s %-40s\n" "Command" "Description"
    printf "%-15s %-40s\n" "-------" "-----------"
    printf "%-15s %-40s\n" "help, -h" "Show this help message"
    printf "%-15s %-40s\n" "install, -i" "Install llama script and its components"
    printf "%-15s %-40s\n" "remove, -r" "Remove llama script and its components"
    printf "%-15s %-40s\n" "update, -u" "Update llama script and its components"
    echo
    echo -e "\e[1;33mAvailable Scripts:\e[0m"
    if [ -d "$SCRIPTS_DIR" ]; then
        for script in "$SCRIPTS_DIR"/*; do
            if [ -x "$script" ]; then
                echo "  $(basename "$script")"
            fi
        done
    fi
}

# Download a file from GitHub and check the response
download_file() {
    local path="$1"
    local output="$2"
    local response

    response=$(curl -s -w "%{http_code}" "$GITHUB_RAW_BASE/$path" -o "$output")

    if [ "$response" != "200" ]; then
        rm -f "$output"
        return 1
    fi
    return 0
}

# Create a symbolic link for the main script
create_symlink() {
    local bin_path=$(get_bin_path)
    sudo ln -sf "$DEV_DIR/llama" "$bin_path/llama"
    echo "Created symbolic link in $bin_path"
}

# Install from local files if GitHub installation fails
install_from_local() {
    echo "Installing from local files..."
    if [ "$(realpath "$0")" != "$DEV_DIR/llama" ]; then
        sudo cp "$0" "$DEV_DIR/llama"
        sudo chmod +x "$DEV_DIR/llama"
    fi

    if [ -d "$DEV_DIR/scripts" ]; then
        sudo cp -r "$DEV_DIR/scripts/"* "$SCRIPTS_DIR/"
        find "$SCRIPTS_DIR" -type f -exec sudo chmod +x {} \;
    fi
}

# Main install function
install_script() {
    echo "Installing llama..."
    setup_temp_dir

    sudo mkdir -p "$DEV_DIR"
    sudo mkdir -p "$SCRIPTS_DIR"

    if [ -n "$GITHUB_USER" ] && [ -n "$GITHUB_REPO" ] && [ "$GITHUB_USER" != "yourusername" ]; then
        echo "Attempting to install from GitHub..."
        if download_file "llama" "$TEMP_DIR/llama"; then
            echo "Successfully downloaded from GitHub"
            sudo cp "$TEMP_DIR/llama" "$DEV_DIR/llama"
            sudo chmod +x "$DEV_DIR/llama"

            local scripts_list=$(curl -s "$GITHUB_API_BASE/contents/scripts?ref=$GITHUB_BRANCH" | grep "\"name\":" | cut -d'"' -f4)

            for script in $scripts_list; do
                echo "Downloading script: $script"
                if download_file "scripts/$script" "$TEMP_DIR/$script"; then
                    sudo cp "$TEMP_DIR/$script" "$SCRIPTS_DIR/$script"
                    sudo chmod +x "$SCRIPTS_DIR/$script"
                else
                    echo "Failed to download script: $script"
                fi
            done
        else
            echo "GitHub download failed. Falling back to local installation..."
            install_from_local
        fi
    else
        install_from_local
    fi

    create_symlink
    echo "Installation completed"
}

# Remove the script and its components
remove_script() {
    local bin_path=$(get_bin_path)
    if [ -L "$bin_path/llama" ]; then
        sudo rm "$bin_path/llama"
        echo "Removed symbolic link from $bin_path"
    fi
    if [ -d "$SCRIPTS_DIR" ]; then
        sudo rm -rf "$SCRIPTS_DIR"
        echo "Removed scripts directory $SCRIPTS_DIR"
    fi
    echo "Llama removed successfully"
}

# Check for updates and install them
update_script() {
    echo "Checking for updates..."
    setup_temp_dir

    if [ -n "$GITHUB_USER" ] && [ -n "$GITHUB_REPO" ]; then
        download_file "llama" "$TEMP_DIR/llama_new"
        new_version=$(grep "^VERSION=" "$TEMP_DIR/llama_new" | cut -d'"' -f2)
        if [ "$new_version" != "$VERSION" ]; then
            echo "Updating from version $VERSION to $new_version"
            install_script
        else
            echo "Already running the latest version ($VERSION)"
        fi
    else
        echo "GitHub details not configured. Updating from local files..."
        install_script
    fi
}

# Execute the appropriate command based on the user's input
case "$1" in
    "help"|"-h")
        show_help
        ;;
    "install"|"-i")
        install_script
        ;;
    "remove"|"-r")
        remove_script
        ;;
    "update"|"-u")
        update_script
        ;;
    "")
        show_help
        ;;
    *)
        script_path="$SCRIPTS_DIR/$1"
        if [ -x "$script_path" ]; then
            shift
            exec "$script_path" "$@"
        else
            echo -e "\e[1;31mError:\e[0m Script '$1' not found or not executable"
            echo "Use 'llama help' to see available scripts"
            exit 1
        fi
        ;;
esac