#!/bin/bash

# Author: Bruno Pavelja - Bruno_AFK - Paveljame IT
# Web: pavelja.me
# Github: github.com/brunoafk
# Version: 1.1.4
# Description: Enhanced script manager with development and production environment support

VERSION="1.1.4"
GITHUB_USER="BrunoAFK"
GITHUB_REPO="LSM"
GITHUB_BRANCH="main"
DEV_DIR="/opt/llama"
INSTALL_DIR="/usr/local/lib/llama"
SCRIPTS_DIR_PROD="$INSTALL_DIR/scripts"
SCRIPTS_DIR_DEV="$DEV_DIR/scripts"
GITHUB_RAW_BASE="https://raw.githubusercontent.com/$GITHUB_USER/$GITHUB_REPO/$GITHUB_BRANCH"
GITHUB_API_BASE="https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO"
TEMP_DIR=""

# Determines if the script is running from the development directory
# Returns: true if running from DEV_DIR, false otherwise
is_dev_mode() {
    [[ "$(basename "$(pwd)")/$(basename "$0")" == "$(basename "$DEV_DIR")/llama" ]]
}

# Creates a temporary directory and registers cleanup handler
# Sets global TEMP_DIR variable and ensures directory removal on script exit
setup_temp_dir() {
    TEMP_DIR=$(mktemp -d)
    trap 'rm -rf "$TEMP_DIR"' EXIT
}

# Returns appropriate installation and scripts directories based on current mode
# Output: Space-separated string containing install_dir and scripts_dir paths
get_directories() {
    if is_dev_mode; then
        echo "$DEV_DIR" "$SCRIPTS_DIR_DEV"
    else
        echo "$INSTALL_DIR" "$SCRIPTS_DIR_PROD"
    fi
}

# Determines the appropriate binary installation path for the current OS
# Currently supports macOS and Linux systems
# Returns: Path string for binary installation
get_bin_path() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "/usr/local/bin"
    else
        echo "/usr/local/bin"
    fi
}

# Display help information with environment indication and script descriptions
show_help() {
    echo -e "\e[1;34mLlama Script Manager v$VERSION\e[0m"
    echo
    echo -e "\e[1;32mUsage:\e[0m"
    echo "  llama [COMMAND] [ARGUMENTS]"
    echo
    echo -e "\e[1;33mCore Commands:\e[0m"
    printf "%-20s %-40s\n" "Command" "Description"
    printf "%-20s %-40s\n" "-------" "-----------"
    printf "%-20s %-40s\n" "help, -h" "Show this help message"
    printf "%-20s %-40s\n" "install, -i" "Install llama script and components"
    printf "%-20s %-40s\n" "remove, -r" "Remove llama script and components"
    printf "%-20s %-40s\n" "update, -u" "Update llama script and components"
    printf "%-20s %-40s\n" "status, -s" "Show current environment status"
    echo
    echo -e "\e[1;33mAvailable Scripts:\e[0m"
    read -r install_dir scripts_dir <<<"$(get_directories)"
    if [ -d "$scripts_dir" ]; then
        for script in "$scripts_dir"/*; do
            if [ -x "$script" ]; then
                script_name=$(basename "$script")
                # Extract description from script file (first 20 lines, case insensitive)
                description=$(head -n 20 "$script" | grep -i "^#.*description:" | head -n 1 | sed 's/^#[ ]*[Dd]escription:[ ]*//')
                if [ -z "$description" ]; then
                    description="No description available"
                fi
                echo -e "\e[1;36m${script_name}\e[0m"
                echo "    ${description}"
                echo
            fi
        done
    fi
}

# Download a file from GitHub and check the response
download_file() {
    local path="$1"
    local output="$2"
    local response

    response=$(curl -s -w "%{http_code}" "$GITHUB_RAW_BASE/$path" -o "$output")

    if [ "$response" != "200" ]; then
        rm -f "$output"
        return 1
    fi
    return 0
}

# Create a symbolic link for the main script
create_symlink() {
    local bin_path=$(get_bin_path)
    if ! is_dev_mode; then
        sudo ln -sf "$PROD_DIR/llama" "$bin_path/llama"
        echo "Created production symbolic link in $bin_path"
    fi
}

# Install from local development directory
install_from_dev() {
    echo "Installing from development directory..."
    read -r install_dir scripts_dir <<<"$(get_directories)"

    sudo mkdir -p "$install_dir"
    sudo mkdir -p "$scripts_dir"

    # Copy main script
    if [ "$(realpath "$0")" != "$install_dir/llama" ]; then
        sudo cp "$0" "$install_dir/llama"
        sudo chmod +x "$install_dir/llama"
    fi

    # Copy scripts
    if [ -d "$DEV_DIR/scripts" ]; then
        sudo cp -r "$DEV_DIR/scripts/"* "$scripts_dir/"
        find "$scripts_dir" -type f -exec sudo chmod +x {} \;
    fi
}

# Install from GitHub (production only)
install_from_github() {
    echo "Installing from GitHub..."
    read -r install_dir scripts_dir <<<"$(get_directories)"

    sudo mkdir -p "$install_dir"
    sudo mkdir -p "$scripts_dir"

    # Clone the repository
    git clone "https://github.com/$GITHUB_USER/$GITHUB_REPO.git" "$TEMP_DIR/repo"

    if [ -d "$TEMP_DIR/repo" ]; then
        # Update main script
        sudo cp "$TEMP_DIR/repo/llama" "$install_dir/llama"
        sudo chmod +x "$install_dir/llama"

        # Only update existing scripts
        if [ -d "$TEMP_DIR/repo/scripts" ] && [ -d "$scripts_dir" ]; then
            # Loop through existing scripts and update only those
            for existing_script in "$scripts_dir"/*; do
                if [ -f "$existing_script" ]; then
                    script_name=$(basename "$existing_script")
                    if [ -f "$TEMP_DIR/repo/scripts/$script_name" ]; then
                        echo "Updating script: $script_name"
                        sudo cp "$TEMP_DIR/repo/scripts/$script_name" "$scripts_dir/$script_name"
                        sudo chmod +x "$scripts_dir/$script_name"
                    fi
                fi
            done
        fi
    else
        echo "Failed to clone repository"
        return 1
    fi
}

# Main install function
install_script() {
    echo "Installing llama..."
    setup_temp_dir

    if is_dev_mode; then
        install_from_dev
    else
        install_from_github
    fi

    create_symlink
    echo "Installation completed in $(is_dev_mode && echo "DEVELOPMENT" || echo "PRODUCTION") mode"
}

# Remove the script and its components
remove_script() {
    read -r install_dir scripts_dir <<<"$(get_directories)"
    local bin_path=$(get_bin_path)

    if ! is_dev_mode && [ -L "$bin_path/llama" ]; then
        sudo rm "$bin_path/llama"
        echo "Removed production symbolic link from $bin_path"
    fi

    if [ -d "$scripts_dir" ]; then
        sudo rm -rf "$scripts_dir"
        echo "Removed scripts directory $scripts_dir"
    fi

    if [ -d "$install_dir" ]; then
        sudo rm -rf "$install_dir"
        echo "Removed installation directory $install_dir"
    fi

    echo "Llama removed successfully from $(is_dev_mode && echo "DEVELOPMENT" || echo "PRODUCTION") environment"
}

# Show current status
show_status() {
    local env_type=$(is_dev_mode && echo "DEVELOPMENT" || echo "PRODUCTION")
    read -r install_dir scripts_dir <<<"$(get_directories)"

    echo -e "\e[1;34mLlama Script Manager Status\e[0m"
    echo -e "Environment: \e[1;33m$env_type\e[0m"
    echo -e "Version: \e[1;32m$VERSION\e[0m"
    echo -e "Installation Directory: \e[1;36m$install_dir\e[0m"
    echo -e "Scripts Directory: \e[1;36m$scripts_dir\e[0m"

    if [ -d "$scripts_dir" ]; then
        echo -e "\nInstalled Scripts:"
        for script in "$scripts_dir"/*; do
            if [ -x "$script" ]; then
                echo "  - $(basename "$script")"
            fi
        done
    fi
}

# Add these helper functions
get_remote_version() {
    local version=""
    # Try to get version from raw GitHub content
    version=$(curl -s "$GITHUB_RAW_BASE/llama" | grep "^VERSION=" | cut -d'"' -f2)
    echo "$version"
}

get_script_version() {
    local script_path="$1"
    local version=""
    # Try to get version from script comments
    version=$(head -n 20 "$script_path" | grep -i "^#.*version:" | head -n 1 | sed 's/^#[ ]*[Vv]ersion:[ ]*//')
    echo "$version"
}

compare_versions() {
    local version1=$1
    local version2=$2

    # Convert versions to comparable numbers
    local v1=(${version1//./ })
    local v2=(${version2//./ })

    # Compare each part of the version
    for i in {0..2}; do
        if [ "${v1[$i]:-0}" -gt "${v2[$i]:-0}" ]; then
            echo "1" # version1 is newer
            return
        elif [ "${v1[$i]:-0}" -lt "${v2[$i]:-0}" ]; then
            echo "-1" # version2 is newer
            return
        fi
    done
    echo "0" # versions are equal
}

# Modify the update_script function
update_script() {
    if is_dev_mode; then
        echo "Development mode: Installing from local files..."
        install_from_dev
    else
        echo "Production mode: Checking for updates..."
        setup_temp_dir

        # Check main script version
        local remote_version=$(get_remote_version)
        local current_version="$VERSION"

        if [ -z "$remote_version" ]; then
            echo "Error: Could not fetch remote version"
            return 1
        fi

        echo "Current version: $current_version"
        echo "Latest version: $remote_version"

        local version_compare=$(compare_versions "$current_version" "$remote_version")

        if [ "$version_compare" -eq "-1" ]; then
            echo "Update available for main script"
            if install_from_github; then
                echo "Update completed successfully"
            else
                echo "Update failed"
                return 1
            fi
        else
            echo "Main script is up to date"
        fi

        # Check individual scripts
        read -r install_dir scripts_dir <<<"$(get_directories)"
        if [ -d "$scripts_dir" ]; then
            echo "Checking individual scripts for updates..."
            local updates_needed=false

            for existing_script in "$scripts_dir"/*; do
                if [ -f "$existing_script" ]; then
                    local script_name=$(basename "$existing_script")
                    local current_script_version=$(get_script_version "$existing_script")
                    local remote_script_version=$(curl -s "$GITHUB_RAW_BASE/scripts/$script_name" | get_script_version "/dev/stdin")

                    if [ -n "$remote_script_version" ] && [ -n "$current_script_version" ]; then
                        echo "Checking $script_name (Current: $current_script_version, Remote: $remote_script_version)"
                        local script_version_compare=$(compare_versions "$current_script_version" "$remote_script_version")

                        if [ "$script_version_compare" -eq "-1" ]; then
                            echo "Update available for $script_name"
                            updates_needed=true
                            # Update individual script
                            if curl -s "$GITHUB_RAW_BASE/scripts/$script_name" | sudo tee "$scripts_dir/$script_name" >/dev/null; then
                                sudo chmod +x "$scripts_dir/$script_name"
                                echo "Updated $script_name successfully"
                            else
                                echo "Failed to update $script_name"
                            fi
                        fi
                    fi
                fi
            done

            if [ "$updates_needed" = false ]; then
                echo "All scripts are up to date"
            fi
        fi
    fi
}

# Main command router
# Processes command-line arguments and executes appropriate functions
# If no known command is provided, attempts to execute it as a script
case "$1" in
"help" | "-h")
    show_help
    ;;
"install" | "-i")
    install_script
    ;;
"remove" | "-r")
    remove_script
    ;;
"update" | "-u")
    update_script
    ;;
"status" | "-s")
    show_status
    ;;
"")
    show_help
    ;;
*)
    if [ -z "$1" ]; then
        echo "Error: No script specified"
        show_help
        exit 1
    fi

    read -r install_dir scripts_dir <<<"$(get_directories)"
    script_path="$scripts_dir/$1"
    if [[ -x "$script_path" ]]; then
        shift
        exec "$script_path" "$@"
    else
        echo -e "\e[1;31mError:\e[0m Script '$1' not found or not executable"
        echo "Use '$(is_dev_mode && echo "./llama" || echo "llama") help' to see available scripts"
        exit 1
    fi
    ;;
esac
